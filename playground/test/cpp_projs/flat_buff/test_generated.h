// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Test {

struct Person;
struct PersonBuilder;

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ADDRESS = 6,
    VT_LIST_OF_JOBS = 8,
    VT_CUR_JOB = 10,
    VT_CUR_SALARY = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *list_of_jobs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LIST_OF_JOBS);
  }
  const ::flatbuffers::String *cur_job() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CUR_JOB);
  }
  double cur_salary() const {
    return GetField<double>(VT_CUR_SALARY, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_LIST_OF_JOBS) &&
           verifier.VerifyVector(list_of_jobs()) &&
           verifier.VerifyVectorOfStrings(list_of_jobs()) &&
           VerifyOffset(verifier, VT_CUR_JOB) &&
           verifier.VerifyString(cur_job()) &&
           VerifyField<double>(verifier, VT_CUR_SALARY, 8) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_address(::flatbuffers::Offset<::flatbuffers::String> address) {
    fbb_.AddOffset(Person::VT_ADDRESS, address);
  }
  void add_list_of_jobs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> list_of_jobs) {
    fbb_.AddOffset(Person::VT_LIST_OF_JOBS, list_of_jobs);
  }
  void add_cur_job(::flatbuffers::Offset<::flatbuffers::String> cur_job) {
    fbb_.AddOffset(Person::VT_CUR_JOB, cur_job);
  }
  void add_cur_salary(double cur_salary) {
    fbb_.AddElement<double>(Person::VT_CUR_SALARY, cur_salary, 0.0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> address = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> list_of_jobs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cur_job = 0,
    double cur_salary = 0.0) {
  PersonBuilder builder_(_fbb);
  builder_.add_cur_salary(cur_salary);
  builder_.add_cur_job(cur_job);
  builder_.add_list_of_jobs(list_of_jobs);
  builder_.add_address(address);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *address = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *list_of_jobs = nullptr,
    const char *cur_job = nullptr,
    double cur_salary = 0.0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto list_of_jobs__ = list_of_jobs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*list_of_jobs) : 0;
  auto cur_job__ = cur_job ? _fbb.CreateString(cur_job) : 0;
  return Test::CreatePerson(
      _fbb,
      name__,
      address__,
      list_of_jobs__,
      cur_job__,
      cur_salary);
}

inline const Test::Person *GetPerson(const void *buf) {
  return ::flatbuffers::GetRoot<Test::Person>(buf);
}

inline const Test::Person *GetSizePrefixedPerson(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test::Person>(buf);
}

inline bool VerifyPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::Person>(nullptr);
}

inline bool VerifySizePrefixedPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::Person>(nullptr);
}

inline void FinishPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Person> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Person> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_TEST_TEST_H_
