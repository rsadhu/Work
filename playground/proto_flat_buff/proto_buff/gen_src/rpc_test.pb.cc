// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_test.proto

#include "rpc_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace testproto {
PROTOBUF_CONSTEXPR Arguments::Arguments(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArgumentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgumentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgumentsDefaultTypeInternal() {}
  union {
    Arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgumentsDefaultTypeInternal _Arguments_default_instance_;
PROTOBUF_CONSTEXPR ReturnData::ReturnData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReturnDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReturnDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReturnDataDefaultTypeInternal() {}
  union {
    ReturnData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReturnDataDefaultTypeInternal _ReturnData_default_instance_;
}  // namespace testproto
static ::_pb::Metadata file_level_metadata_rpc_5ftest_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5ftest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5ftest_2eproto = nullptr;

const uint32_t TableStruct_rpc_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testproto::Arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testproto::Arguments, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::testproto::Arguments, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::testproto::Arguments, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testproto::ReturnData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testproto::ReturnData, _impl_.answer_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::testproto::Arguments)},
  { 9, -1, -1, sizeof(::testproto::ReturnData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::testproto::_Arguments_default_instance_._instance,
  &::testproto::_ReturnData_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016rpc_test.proto\022\ttestproto\"6\n\tArguments"
  "\022\014\n\004name\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\n\n\002id\030\003 "
  "\001(\003\"\034\n\nReturnData\022\016\n\006answer\030\001 \001(\t2B\n\007Man"
  "ager\0227\n\010sendData\022\024.testproto.Arguments\032\025"
  ".testproto.ReturnDatab\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5ftest_2eproto = {
    false, false, 189, descriptor_table_protodef_rpc_5ftest_2eproto,
    "rpc_test.proto",
    &descriptor_table_rpc_5ftest_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_rpc_5ftest_2eproto::offsets,
    file_level_metadata_rpc_5ftest_2eproto, file_level_enum_descriptors_rpc_5ftest_2eproto,
    file_level_service_descriptors_rpc_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5ftest_2eproto_getter() {
  return &descriptor_table_rpc_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5ftest_2eproto(&descriptor_table_rpc_5ftest_2eproto);
namespace testproto {

// ===================================================================

class Arguments::_Internal {
 public:
};

Arguments::Arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testproto.Arguments)
}
Arguments::Arguments(const Arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Arguments* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:testproto.Arguments)
}

inline void Arguments::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Arguments::~Arguments() {
  // @@protoc_insertion_point(destructor:testproto.Arguments)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
}

void Arguments::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:testproto.Arguments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Arguments::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testproto.Arguments.name"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testproto.Arguments.address"));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Arguments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testproto.Arguments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testproto.Arguments.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testproto.Arguments.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testproto.Arguments)
  return target;
}

size_t Arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testproto.Arguments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Arguments::GetClassData() const { return &_class_data_; }


void Arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Arguments*>(&to_msg);
  auto& from = static_cast<const Arguments&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testproto.Arguments)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Arguments::CopyFrom(const Arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testproto.Arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arguments::IsInitialized() const {
  return true;
}

void Arguments::InternalSwap(Arguments* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Arguments::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftest_2eproto_getter, &descriptor_table_rpc_5ftest_2eproto_once,
      file_level_metadata_rpc_5ftest_2eproto[0]);
}

// ===================================================================

class ReturnData::_Internal {
 public:
};

ReturnData::ReturnData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testproto.ReturnData)
}
ReturnData::ReturnData(const ReturnData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReturnData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_answer().empty()) {
    _this->_impl_.answer_.Set(from._internal_answer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testproto.ReturnData)
}

inline void ReturnData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReturnData::~ReturnData() {
  // @@protoc_insertion_point(destructor:testproto.ReturnData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReturnData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.answer_.Destroy();
}

void ReturnData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReturnData::Clear() {
// @@protoc_insertion_point(message_clear_start:testproto.ReturnData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testproto.ReturnData.answer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReturnData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testproto.ReturnData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (!this->_internal_answer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testproto.ReturnData.answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testproto.ReturnData)
  return target;
}

size_t ReturnData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testproto.ReturnData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 1;
  if (!this->_internal_answer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReturnData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReturnData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReturnData::GetClassData() const { return &_class_data_; }


void ReturnData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReturnData*>(&to_msg);
  auto& from = static_cast<const ReturnData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testproto.ReturnData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_answer().empty()) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReturnData::CopyFrom(const ReturnData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testproto.ReturnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnData::IsInitialized() const {
  return true;
}

void ReturnData::InternalSwap(ReturnData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.answer_, lhs_arena,
      &other->_impl_.answer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftest_2eproto_getter, &descriptor_table_rpc_5ftest_2eproto_once,
      file_level_metadata_rpc_5ftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testproto::Arguments*
Arena::CreateMaybeMessage< ::testproto::Arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testproto::Arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::testproto::ReturnData*
Arena::CreateMaybeMessage< ::testproto::ReturnData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testproto::ReturnData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
