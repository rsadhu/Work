// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cmake {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class cmake_test;
class cmake_test_library;

// ===================================================================

class cmake_test_library : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cmake.cmake_test.library) */ {
 public:
  cmake_test_library();
  virtual ~cmake_test_library();

  cmake_test_library(const cmake_test_library& from);

  inline cmake_test_library& operator=(const cmake_test_library& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmake_test_library& default_instance();

  void Swap(cmake_test_library* other);

  // implements Message ----------------------------------------------

  inline cmake_test_library* New() const { return New(NULL); }

  cmake_test_library* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmake_test_library& from);
  void MergeFrom(const cmake_test_library& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(cmake_test_library* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string libname = 1;
  bool has_libname() const;
  void clear_libname();
  static const int kLibnameFieldNumber = 1;
  const ::std::string& libname() const;
  void set_libname(const ::std::string& value);
  void set_libname(const char* value);
  void set_libname(const char* value, size_t size);
  ::std::string* mutable_libname();
  ::std::string* release_libname();
  void set_allocated_libname(::std::string* libname);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cmake.cmake_test.library)
 private:
  inline void set_has_libname();
  inline void clear_has_libname();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr libname_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static cmake_test_library* default_instance_;
};
// -------------------------------------------------------------------

class cmake_test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cmake.cmake_test) */ {
 public:
  cmake_test();
  virtual ~cmake_test();

  cmake_test(const cmake_test& from);

  inline cmake_test& operator=(const cmake_test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmake_test& default_instance();

  void Swap(cmake_test* other);

  // implements Message ----------------------------------------------

  inline cmake_test* New() const { return New(NULL); }

  cmake_test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmake_test& from);
  void MergeFrom(const cmake_test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(cmake_test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef cmake_test_library library;

  // accessors -------------------------------------------------------

  // optional string project_name = 1;
  bool has_project_name() const;
  void clear_project_name();
  static const int kProjectNameFieldNumber = 1;
  const ::std::string& project_name() const;
  void set_project_name(const ::std::string& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  ::std::string* mutable_project_name();
  ::std::string* release_project_name();
  void set_allocated_project_name(::std::string* project_name);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .cmake.cmake_test.library lib = 3;
  bool has_lib() const;
  void clear_lib();
  static const int kLibFieldNumber = 3;
  const ::cmake::cmake_test_library& lib() const;
  ::cmake::cmake_test_library* mutable_lib();
  ::cmake::cmake_test_library* release_lib();
  void set_allocated_lib(::cmake::cmake_test_library* lib);

  // repeated string source_files = 4;
  int source_files_size() const;
  void clear_source_files();
  static const int kSourceFilesFieldNumber = 4;
  const ::std::string& source_files(int index) const;
  ::std::string* mutable_source_files(int index);
  void set_source_files(int index, const ::std::string& value);
  void set_source_files(int index, const char* value);
  void set_source_files(int index, const char* value, size_t size);
  ::std::string* add_source_files();
  void add_source_files(const ::std::string& value);
  void add_source_files(const char* value);
  void add_source_files(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& source_files() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_source_files();

  // @@protoc_insertion_point(class_scope:cmake.cmake_test)
 private:
  inline void set_has_project_name();
  inline void clear_has_project_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lib();
  inline void clear_has_lib();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr project_name_;
  ::cmake::cmake_test_library* lib_;
  ::google::protobuf::RepeatedPtrField< ::std::string> source_files_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static cmake_test* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// cmake_test_library

// optional string libname = 1;
inline bool cmake_test_library::has_libname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmake_test_library::set_has_libname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmake_test_library::clear_has_libname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmake_test_library::clear_libname() {
  libname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_libname();
}
inline const ::std::string& cmake_test_library::libname() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.library.libname)
  return libname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmake_test_library::set_libname(const ::std::string& value) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmake.cmake_test.library.libname)
}
inline void cmake_test_library::set_libname(const char* value) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.library.libname)
}
inline void cmake_test_library::set_libname(const char* value, size_t size) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.library.libname)
}
inline ::std::string* cmake_test_library::mutable_libname() {
  set_has_libname();
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.library.libname)
  return libname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cmake_test_library::release_libname() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.library.libname)
  clear_has_libname();
  return libname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmake_test_library::set_allocated_libname(::std::string* libname) {
  if (libname != NULL) {
    set_has_libname();
  } else {
    clear_has_libname();
  }
  libname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), libname);
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.library.libname)
}

// optional int32 version = 2;
inline bool cmake_test_library::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cmake_test_library::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cmake_test_library::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cmake_test_library::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 cmake_test_library::version() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.library.version)
  return version_;
}
inline void cmake_test_library::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cmake.cmake_test.library.version)
}

// -------------------------------------------------------------------

// cmake_test

// optional string project_name = 1;
inline bool cmake_test::has_project_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmake_test::set_has_project_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmake_test::clear_has_project_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmake_test::clear_project_name() {
  project_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_project_name();
}
inline const ::std::string& cmake_test::project_name() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.project_name)
  return project_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmake_test::set_project_name(const ::std::string& value) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmake.cmake_test.project_name)
}
inline void cmake_test::set_project_name(const char* value) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.project_name)
}
inline void cmake_test::set_project_name(const char* value, size_t size) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.project_name)
}
inline ::std::string* cmake_test::mutable_project_name() {
  set_has_project_name();
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.project_name)
  return project_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cmake_test::release_project_name() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.project_name)
  clear_has_project_name();
  return project_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmake_test::set_allocated_project_name(::std::string* project_name) {
  if (project_name != NULL) {
    set_has_project_name();
  } else {
    clear_has_project_name();
  }
  project_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_name);
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.project_name)
}

// optional int32 id = 2;
inline bool cmake_test::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cmake_test::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cmake_test::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cmake_test::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cmake_test::id() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.id)
  return id_;
}
inline void cmake_test::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cmake.cmake_test.id)
}

// optional .cmake.cmake_test.library lib = 3;
inline bool cmake_test::has_lib() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cmake_test::set_has_lib() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cmake_test::clear_has_lib() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cmake_test::clear_lib() {
  if (lib_ != NULL) lib_->::cmake::cmake_test_library::Clear();
  clear_has_lib();
}
inline const ::cmake::cmake_test_library& cmake_test::lib() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.lib)
  return lib_ != NULL ? *lib_ : *default_instance_->lib_;
}
inline ::cmake::cmake_test_library* cmake_test::mutable_lib() {
  set_has_lib();
  if (lib_ == NULL) {
    lib_ = new ::cmake::cmake_test_library;
  }
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.lib)
  return lib_;
}
inline ::cmake::cmake_test_library* cmake_test::release_lib() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.lib)
  clear_has_lib();
  ::cmake::cmake_test_library* temp = lib_;
  lib_ = NULL;
  return temp;
}
inline void cmake_test::set_allocated_lib(::cmake::cmake_test_library* lib) {
  delete lib_;
  lib_ = lib;
  if (lib) {
    set_has_lib();
  } else {
    clear_has_lib();
  }
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.lib)
}

// repeated string source_files = 4;
inline int cmake_test::source_files_size() const {
  return source_files_.size();
}
inline void cmake_test::clear_source_files() {
  source_files_.Clear();
}
inline const ::std::string& cmake_test::source_files(int index) const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.source_files)
  return source_files_.Get(index);
}
inline ::std::string* cmake_test::mutable_source_files(int index) {
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.source_files)
  return source_files_.Mutable(index);
}
inline void cmake_test::set_source_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmake.cmake_test.source_files)
  source_files_.Mutable(index)->assign(value);
}
inline void cmake_test::set_source_files(int index, const char* value) {
  source_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.source_files)
}
inline void cmake_test::set_source_files(int index, const char* value, size_t size) {
  source_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.source_files)
}
inline ::std::string* cmake_test::add_source_files() {
  // @@protoc_insertion_point(field_add_mutable:cmake.cmake_test.source_files)
  return source_files_.Add();
}
inline void cmake_test::add_source_files(const ::std::string& value) {
  source_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmake.cmake_test.source_files)
}
inline void cmake_test::add_source_files(const char* value) {
  source_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmake.cmake_test.source_files)
}
inline void cmake_test::add_source_files(const char* value, size_t size) {
  source_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmake.cmake_test.source_files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
cmake_test::source_files() const {
  // @@protoc_insertion_point(field_list:cmake.cmake_test.source_files)
  return source_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
cmake_test::mutable_source_files() {
  // @@protoc_insertion_point(field_mutable_list:cmake.cmake_test.source_files)
  return &source_files_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cmake

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
