// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cmake {

namespace {

const ::google::protobuf::Descriptor* cmake_test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmake_test_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmake_test_library_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmake_test_library_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  cmake_test_descriptor_ = file->message_type(0);
  static const int cmake_test_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, project_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, lib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, source_files_),
  };
  cmake_test_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cmake_test_descriptor_,
      cmake_test::default_instance_,
      cmake_test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, _has_bits_[0]),
      -1,
      -1,
      sizeof(cmake_test),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test, _internal_metadata_),
      -1);
  cmake_test_library_descriptor_ = cmake_test_descriptor_->nested_type(0);
  static const int cmake_test_library_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test_library, libname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test_library, version_),
  };
  cmake_test_library_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cmake_test_library_descriptor_,
      cmake_test_library::default_instance_,
      cmake_test_library_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test_library, _has_bits_[0]),
      -1,
      -1,
      sizeof(cmake_test_library),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmake_test_library, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cmake_test_descriptor_, &cmake_test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cmake_test_library_descriptor_, &cmake_test_library::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete cmake_test::default_instance_;
  delete cmake_test_reflection_;
  delete cmake_test_library::default_instance_;
  delete cmake_test_library_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\005cmake\"\231\001\n\ncmake_test\022\024\n\014pr"
    "oject_name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022&\n\003lib\030\003 \001("
    "\0132\031.cmake.cmake_test.library\022\024\n\014source_f"
    "iles\030\004 \003(\t\032+\n\007library\022\017\n\007libname\030\001 \001(\t\022\017"
    "\n\007version\030\002 \001(\005", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  cmake_test::default_instance_ = new cmake_test();
  cmake_test_library::default_instance_ = new cmake_test_library();
  cmake_test::default_instance_->InitAsDefaultInstance();
  cmake_test_library::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmake_test_library::kLibnameFieldNumber;
const int cmake_test_library::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmake_test_library::cmake_test_library()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmake.cmake_test.library)
}

void cmake_test_library::InitAsDefaultInstance() {
}

cmake_test_library::cmake_test_library(const cmake_test_library& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cmake.cmake_test.library)
}

void cmake_test_library::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  libname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmake_test_library::~cmake_test_library() {
  // @@protoc_insertion_point(destructor:cmake.cmake_test.library)
  SharedDtor();
}

void cmake_test_library::SharedDtor() {
  libname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void cmake_test_library::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmake_test_library::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmake_test_library_descriptor_;
}

const cmake_test_library& cmake_test_library::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

cmake_test_library* cmake_test_library::default_instance_ = NULL;

cmake_test_library* cmake_test_library::New(::google::protobuf::Arena* arena) const {
  cmake_test_library* n = new cmake_test_library;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cmake_test_library::Clear() {
// @@protoc_insertion_point(message_clear_start:cmake.cmake_test.library)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_libname()) {
      libname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool cmake_test_library::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmake.cmake_test.library)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string libname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_libname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->libname().data(), this->libname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmake.cmake_test.library.libname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmake.cmake_test.library)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmake.cmake_test.library)
  return false;
#undef DO_
}

void cmake_test_library::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmake.cmake_test.library)
  // optional string libname = 1;
  if (has_libname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->libname().data(), this->libname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.library.libname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->libname(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cmake.cmake_test.library)
}

::google::protobuf::uint8* cmake_test_library::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cmake.cmake_test.library)
  // optional string libname = 1;
  if (has_libname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->libname().data(), this->libname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.library.libname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->libname(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cmake.cmake_test.library)
  return target;
}

int cmake_test_library::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cmake.cmake_test.library)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string libname = 1;
    if (has_libname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->libname());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmake_test_library::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmake.cmake_test.library)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const cmake_test_library* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const cmake_test_library>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmake.cmake_test.library)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmake.cmake_test.library)
    MergeFrom(*source);
  }
}

void cmake_test_library::MergeFrom(const cmake_test_library& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmake.cmake_test.library)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_libname()) {
      set_has_libname();
      libname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.libname_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void cmake_test_library::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmake.cmake_test.library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmake_test_library::CopyFrom(const cmake_test_library& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmake.cmake_test.library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmake_test_library::IsInitialized() const {

  return true;
}

void cmake_test_library::Swap(cmake_test_library* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmake_test_library::InternalSwap(cmake_test_library* other) {
  libname_.Swap(&other->libname_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cmake_test_library::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmake_test_library_descriptor_;
  metadata.reflection = cmake_test_library_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmake_test::kProjectNameFieldNumber;
const int cmake_test::kIdFieldNumber;
const int cmake_test::kLibFieldNumber;
const int cmake_test::kSourceFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmake_test::cmake_test()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmake.cmake_test)
}

void cmake_test::InitAsDefaultInstance() {
  lib_ = const_cast< ::cmake::cmake_test_library*>(&::cmake::cmake_test_library::default_instance());
}

cmake_test::cmake_test(const cmake_test& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cmake.cmake_test)
}

void cmake_test::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  project_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  lib_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmake_test::~cmake_test() {
  // @@protoc_insertion_point(destructor:cmake.cmake_test)
  SharedDtor();
}

void cmake_test::SharedDtor() {
  project_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete lib_;
  }
}

void cmake_test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmake_test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmake_test_descriptor_;
}

const cmake_test& cmake_test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

cmake_test* cmake_test::default_instance_ = NULL;

cmake_test* cmake_test::New(::google::protobuf::Arena* arena) const {
  cmake_test* n = new cmake_test;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cmake_test::Clear() {
// @@protoc_insertion_point(message_clear_start:cmake.cmake_test)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_project_name()) {
      project_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0;
    if (has_lib()) {
      if (lib_ != NULL) lib_->::cmake::cmake_test_library::Clear();
    }
  }
  source_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool cmake_test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmake.cmake_test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->project_name().data(), this->project_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmake.cmake_test.project_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lib;
        break;
      }

      // optional .cmake.cmake_test.library lib = 3;
      case 3: {
        if (tag == 26) {
         parse_lib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lib()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source_files;
        break;
      }

      // repeated string source_files = 4;
      case 4: {
        if (tag == 34) {
         parse_source_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_files(this->source_files_size() - 1).data(),
            this->source_files(this->source_files_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmake.cmake_test.source_files");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source_files;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmake.cmake_test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmake.cmake_test)
  return false;
#undef DO_
}

void cmake_test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmake.cmake_test)
  // optional string project_name = 1;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.project_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .cmake.cmake_test.library lib = 3;
  if (has_lib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lib_, output);
  }

  // repeated string source_files = 4;
  for (int i = 0; i < this->source_files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_files(i).data(), this->source_files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.source_files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->source_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cmake.cmake_test)
}

::google::protobuf::uint8* cmake_test::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cmake.cmake_test)
  // optional string project_name = 1;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.project_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .cmake.cmake_test.library lib = 3;
  if (has_lib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lib_, false, target);
  }

  // repeated string source_files = 4;
  for (int i = 0; i < this->source_files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_files(i).data(), this->source_files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmake.cmake_test.source_files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->source_files(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cmake.cmake_test)
  return target;
}

int cmake_test::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cmake.cmake_test)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string project_name = 1;
    if (has_project_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project_name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .cmake.cmake_test.library lib = 3;
    if (has_lib()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lib_);
    }

  }
  // repeated string source_files = 4;
  total_size += 1 * this->source_files_size();
  for (int i = 0; i < this->source_files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_files(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmake_test::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmake.cmake_test)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const cmake_test* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const cmake_test>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmake.cmake_test)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmake.cmake_test)
    MergeFrom(*source);
  }
}

void cmake_test::MergeFrom(const cmake_test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmake.cmake_test)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  source_files_.MergeFrom(from.source_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_project_name()) {
      set_has_project_name();
      project_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lib()) {
      mutable_lib()->::cmake::cmake_test_library::MergeFrom(from.lib());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void cmake_test::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmake.cmake_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmake_test::CopyFrom(const cmake_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmake.cmake_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmake_test::IsInitialized() const {

  return true;
}

void cmake_test::Swap(cmake_test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmake_test::InternalSwap(cmake_test* other) {
  project_name_.Swap(&other->project_name_);
  std::swap(id_, other->id_);
  std::swap(lib_, other->lib_);
  source_files_.UnsafeArenaSwap(&other->source_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cmake_test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmake_test_descriptor_;
  metadata.reflection = cmake_test_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cmake_test_library

// optional string libname = 1;
bool cmake_test_library::has_libname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void cmake_test_library::set_has_libname() {
  _has_bits_[0] |= 0x00000001u;
}
void cmake_test_library::clear_has_libname() {
  _has_bits_[0] &= ~0x00000001u;
}
void cmake_test_library::clear_libname() {
  libname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_libname();
}
 const ::std::string& cmake_test_library::libname() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.library.libname)
  return libname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void cmake_test_library::set_libname(const ::std::string& value) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmake.cmake_test.library.libname)
}
 void cmake_test_library::set_libname(const char* value) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.library.libname)
}
 void cmake_test_library::set_libname(const char* value, size_t size) {
  set_has_libname();
  libname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.library.libname)
}
 ::std::string* cmake_test_library::mutable_libname() {
  set_has_libname();
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.library.libname)
  return libname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* cmake_test_library::release_libname() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.library.libname)
  clear_has_libname();
  return libname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void cmake_test_library::set_allocated_libname(::std::string* libname) {
  if (libname != NULL) {
    set_has_libname();
  } else {
    clear_has_libname();
  }
  libname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), libname);
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.library.libname)
}

// optional int32 version = 2;
bool cmake_test_library::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void cmake_test_library::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void cmake_test_library::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void cmake_test_library::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 cmake_test_library::version() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.library.version)
  return version_;
}
 void cmake_test_library::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cmake.cmake_test.library.version)
}

// -------------------------------------------------------------------

// cmake_test

// optional string project_name = 1;
bool cmake_test::has_project_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void cmake_test::set_has_project_name() {
  _has_bits_[0] |= 0x00000001u;
}
void cmake_test::clear_has_project_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void cmake_test::clear_project_name() {
  project_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_project_name();
}
 const ::std::string& cmake_test::project_name() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.project_name)
  return project_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void cmake_test::set_project_name(const ::std::string& value) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmake.cmake_test.project_name)
}
 void cmake_test::set_project_name(const char* value) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.project_name)
}
 void cmake_test::set_project_name(const char* value, size_t size) {
  set_has_project_name();
  project_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.project_name)
}
 ::std::string* cmake_test::mutable_project_name() {
  set_has_project_name();
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.project_name)
  return project_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* cmake_test::release_project_name() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.project_name)
  clear_has_project_name();
  return project_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void cmake_test::set_allocated_project_name(::std::string* project_name) {
  if (project_name != NULL) {
    set_has_project_name();
  } else {
    clear_has_project_name();
  }
  project_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_name);
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.project_name)
}

// optional int32 id = 2;
bool cmake_test::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void cmake_test::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void cmake_test::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void cmake_test::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 cmake_test::id() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.id)
  return id_;
}
 void cmake_test::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cmake.cmake_test.id)
}

// optional .cmake.cmake_test.library lib = 3;
bool cmake_test::has_lib() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void cmake_test::set_has_lib() {
  _has_bits_[0] |= 0x00000004u;
}
void cmake_test::clear_has_lib() {
  _has_bits_[0] &= ~0x00000004u;
}
void cmake_test::clear_lib() {
  if (lib_ != NULL) lib_->::cmake::cmake_test_library::Clear();
  clear_has_lib();
}
const ::cmake::cmake_test_library& cmake_test::lib() const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.lib)
  return lib_ != NULL ? *lib_ : *default_instance_->lib_;
}
::cmake::cmake_test_library* cmake_test::mutable_lib() {
  set_has_lib();
  if (lib_ == NULL) {
    lib_ = new ::cmake::cmake_test_library;
  }
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.lib)
  return lib_;
}
::cmake::cmake_test_library* cmake_test::release_lib() {
  // @@protoc_insertion_point(field_release:cmake.cmake_test.lib)
  clear_has_lib();
  ::cmake::cmake_test_library* temp = lib_;
  lib_ = NULL;
  return temp;
}
void cmake_test::set_allocated_lib(::cmake::cmake_test_library* lib) {
  delete lib_;
  lib_ = lib;
  if (lib) {
    set_has_lib();
  } else {
    clear_has_lib();
  }
  // @@protoc_insertion_point(field_set_allocated:cmake.cmake_test.lib)
}

// repeated string source_files = 4;
int cmake_test::source_files_size() const {
  return source_files_.size();
}
void cmake_test::clear_source_files() {
  source_files_.Clear();
}
 const ::std::string& cmake_test::source_files(int index) const {
  // @@protoc_insertion_point(field_get:cmake.cmake_test.source_files)
  return source_files_.Get(index);
}
 ::std::string* cmake_test::mutable_source_files(int index) {
  // @@protoc_insertion_point(field_mutable:cmake.cmake_test.source_files)
  return source_files_.Mutable(index);
}
 void cmake_test::set_source_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmake.cmake_test.source_files)
  source_files_.Mutable(index)->assign(value);
}
 void cmake_test::set_source_files(int index, const char* value) {
  source_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmake.cmake_test.source_files)
}
 void cmake_test::set_source_files(int index, const char* value, size_t size) {
  source_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmake.cmake_test.source_files)
}
 ::std::string* cmake_test::add_source_files() {
  // @@protoc_insertion_point(field_add_mutable:cmake.cmake_test.source_files)
  return source_files_.Add();
}
 void cmake_test::add_source_files(const ::std::string& value) {
  source_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmake.cmake_test.source_files)
}
 void cmake_test::add_source_files(const char* value) {
  source_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmake.cmake_test.source_files)
}
 void cmake_test::add_source_files(const char* value, size_t size) {
  source_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmake.cmake_test.source_files)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
cmake_test::source_files() const {
  // @@protoc_insertion_point(field_list:cmake.cmake_test.source_files)
  return source_files_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
cmake_test::mutable_source_files() {
  // @@protoc_insertion_point(field_mutable_list:cmake.cmake_test.source_files)
  return &source_files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cmake

// @@protoc_insertion_point(global_scope)
